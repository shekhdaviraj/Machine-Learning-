# -*- coding: utf-8 -*-
"""ML_dbscan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q6O_YQvTcFsCQyvaMZsrwz03-8PgUgyu
"""

from google.colab import drive

drive.mount('/content/drive')

cd /content/drive/"MyDrive/ICT_ DEGREE/sem 6/ML"

ls

import numpy as np
import pandas as pd #panda used as csv file to convert into dataframe lib is used '''
import matplotlib.pyplot as plt #mathematical plotting library python plots'''
dataset = pd.read_csv("KMeans.csv")

dataset

X=dataset.iloc[:,[1,2]].values

X

from sklearn.preprocessing import StandardScaler
X=StandardScaler().fit_transform(X) #map value wit normalized value --- feature  scaling

#hyperparameter
ns=3
#to find distance and get idea of the nearest point neigbouring point

from sklearn.neighbors import NearestNeighbors #KNN
nearestneigbors=NearestNeighbors(n_neighbors=3).fit(X)

#distance and the datapoint index from our dataset which are nearer to selected datapoint
distance,indices=nearestneigbors.kneighbors(X)

distance

from sklearn.cluster import DBSCAN

db= DBSCAN(eps=0.3,min_samples=5).fit(X)

#core,boundary and noisr point
labels=db.labels_

set(labels)
#cluster number
#-1 indcate noise point

n_clusters=len(set(labels))-(1 if -1 in labels else 0)

n_clusters

db.core_sample_indices_

#masking to bollean values for core datapoiints

#creating array with all points markes as false = 0
core_mask=np.zeros_like(db.labels_,dtype=bool)

core_mask[db.core_sample_indices_]=True

core_mask#core indices will be true else false so false will be noise point or boundry point

colors=[plt.cm.Spectral(i)for i in np.linspace(0,1,len(set(labels)))]

colors

unique_labels=set(labels)

unique_labels

#eacah label indicate one cluster
#each cluseter have one un color
for k,col in zip(unique_labels,colors):
  if k==-1:
    col=[0,0,0,1] #- is noise so it black
  class_mask=(labels==k)
  #separatin gboundary and core point from noise point
  core_points=X[class_mask & core_mask]
  plt.plot(core_points[:,0],core_points[:,1],'o',markerfacecolor=tuple(col),markersize=15)

  core_points=X[class_mask & ~core_mask]
  plt.plot(core_points[:,0],core_points[:,1],'o',markerfacecolor=tuple(col),markersize=7)

plt.title('DBscan plot')
plt.show()